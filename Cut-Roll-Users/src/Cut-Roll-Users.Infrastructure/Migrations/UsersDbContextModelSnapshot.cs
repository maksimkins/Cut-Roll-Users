// <auto-generated />
using System;
using Cut_Roll_Users.Infrastructure.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cut_Roll_Users.Infrastructure.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    partial class UsersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cut_Roll_Users.Core.Casts.Models.Cast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("CastOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Character")
                        .HasColumnType("text");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("cast", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Comments.Models.Comment", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Common.Models.ExecutedScript", b =>
                {
                    b.Property<string>("ScriptName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ScriptName");

                    b.ToTable("ExecutedScripts");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Countries.Models.Country", b =>
                {
                    b.Property<string>("Iso3166_1")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Iso3166_1");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Crews.Models.Crew", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("crew", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Follows.Models.Follow", b =>
                {
                    b.Property<string>("FollowerId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("FollowingId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("FollowerId", "FollowingId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FollowerId");

                    b.HasIndex("FollowingId");

                    b.ToTable("follows", null, t =>
                        {
                            t.HasCheckConstraint("CK_Follow_SelfFollow", "\"FollowerId\" != \"FollowingId\"");
                        });
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Genres.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Keywords.Models.Keyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("keywords", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ListEntities.Models.ListEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("list_entities", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ListLikes.Models.ListLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "ListId");

                    b.HasIndex("ListId");

                    b.ToTable("list_likes", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ListMovies.Models.ListMovie", b =>
                {
                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.HasKey("ListId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("list_movies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieGenres.Models.MovieGenre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_genres", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieImages.Models.MovieImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_images", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieKeywords.Models.MovieKeyword", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KeywordId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("movie_keywords", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieLikes.Models.MovieLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_likes", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieOriginCountries.Models.MovieOriginCountry", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.HasKey("MovieId", "CountryCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("movie_origin_countries", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieProductionCompanies.Models.MovieProductionCompany", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("movie_production_companies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieProductionCountries.Models.MovieProductionCountry", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.HasKey("MovieId", "CountryCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("movie_production_countries", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieSpokenLanguages.Models.MovieSpokenLanguage", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.HasKey("MovieId", "LanguageCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("movie_spoken_languages", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieVideos.Models.MovieVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_videos", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Movies.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<long?>("Budget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("Homepage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Rating")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<float?>("RatingAverage")
                        .HasColumnType("real");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("Revenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int?>("Runtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Tagline")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<float?>("VoteAverage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("Id");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.People.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ProductionCompanies.Models.ProductionCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("production_companies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ReviewLikes.Models.ReviewLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("review_likes", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Reviews.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<float>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique();

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.SpokenLanguages.Models.SpokenLanguage", b =>
                {
                    b.Property<string>("Iso639_1")
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Iso639_1");

                    b.ToTable("spoken_languages", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Users.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.WantToWatchFilms.Models.WantToWatchFilm", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("want_to_watch_films", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.WatchedMovies.Models.WatchedMovie", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("WatchedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("watched_movies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Casts.Models.Cast", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.People.Models.Person", "Person")
                        .WithMany("CastRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Comments.Models.Comment", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Reviews.Models.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Crews.Models.Crew", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Crew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.People.Models.Person", "Person")
                        .WithMany("CrewRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Follows.Models.Follow", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "Following")
                        .WithMany("Followers")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ListEntities.Models.ListEntity", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "User")
                        .WithMany("Lists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ListLikes.Models.ListLike", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.ListEntities.Models.ListEntity", "List")
                        .WithMany("Likes")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "User")
                        .WithMany("ListLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ListMovies.Models.ListMovie", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.ListEntities.Models.ListEntity", "List")
                        .WithMany("Movies")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("ListMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieGenres.Models.MovieGenre", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Genres.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieImages.Models.MovieImage", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Images")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieKeywords.Models.MovieKeyword", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Keywords.Models.Keyword", "Keyword")
                        .WithMany("MovieKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Keywords")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieLikes.Models.MovieLike", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("MovieLikes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "User")
                        .WithMany("MovieLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieOriginCountries.Models.MovieOriginCountry", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Countries.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("OriginCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieProductionCompanies.Models.MovieProductionCompany", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.ProductionCompanies.Models.ProductionCompany", "Company")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("ProductionCompanies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieProductionCountries.Models.MovieProductionCountry", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Countries.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("ProductionCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieSpokenLanguages.Models.MovieSpokenLanguage", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.SpokenLanguages.Models.SpokenLanguage", "Language")
                        .WithMany("MovieSpokenLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("SpokenLanguages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.MovieVideos.Models.MovieVideo", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Videos")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ProductionCompanies.Models.ProductionCompany", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Countries.Models.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryCode");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ReviewLikes.Models.ReviewLike", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Reviews.Models.Review", "Review")
                        .WithMany("Likes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "User")
                        .WithMany("ReviewLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Reviews.Models.Review", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.WantToWatchFilms.Models.WantToWatchFilm", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("WantToWatchFilms")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "User")
                        .WithMany("WantToWatchFilms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.WatchedMovies.Models.WatchedMovie", b =>
                {
                    b.HasOne("Cut_Roll_Users.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Watched")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_Users.Core.Users.Models.User", "User")
                        .WithMany("Watched")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Countries.Models.Country", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Genres.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Keywords.Models.Keyword", b =>
                {
                    b.Navigation("MovieKeywords");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ListEntities.Models.ListEntity", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Movies.Models.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("Images");

                    b.Navigation("Keywords");

                    b.Navigation("ListMovies");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieLikes");

                    b.Navigation("OriginCountries");

                    b.Navigation("ProductionCompanies");

                    b.Navigation("ProductionCountries");

                    b.Navigation("Reviews");

                    b.Navigation("SpokenLanguages");

                    b.Navigation("Videos");

                    b.Navigation("WantToWatchFilms");

                    b.Navigation("Watched");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.People.Models.Person", b =>
                {
                    b.Navigation("CastRoles");

                    b.Navigation("CrewRoles");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.ProductionCompanies.Models.ProductionCompany", b =>
                {
                    b.Navigation("MovieProductionCompanies");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Reviews.Models.Review", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.SpokenLanguages.Models.SpokenLanguage", b =>
                {
                    b.Navigation("MovieSpokenLanguages");
                });

            modelBuilder.Entity("Cut_Roll_Users.Core.Users.Models.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("ListLikes");

                    b.Navigation("Lists");

                    b.Navigation("MovieLikes");

                    b.Navigation("ReviewLikes");

                    b.Navigation("Reviews");

                    b.Navigation("WantToWatchFilms");

                    b.Navigation("Watched");
                });
#pragma warning restore 612, 618
        }
    }
}
